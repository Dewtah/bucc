#!/bin/bash
version="0.1"

repo_root=$(dirname "$0" | rev | cut -c5- | rev)
state=${repo_root}/state
mkdir -p $state

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

if [[ -x "$(command -v bosh2)" && $(bosh2 --version | awk '{print $2}') > 2.0 ]]; then
   boshexec=bosh2
else
   boshexec=bosh
fi

vars_file() {
    local local_file=${repo_root}/local.yml
    local vars_file=${repo_root}/vars.yml
    local state_vars=${state}/vars.yml
    if [ -e $local_file ]; then
        ${boshexec} int $vars_file -o $local_file > $state_vars
    else
        cp $vars_file $state_vars
    fi
    echo $state_vars
}

manifest="${repo_root}/src/bosh-deployment/bosh.yml"
vars_file_arg="--vars-file $(vars_file)"
ssh_private_key="${state}/ssh.key"
state_arg="--state ${state}/state.json"
vars_store=${state}/creds.yml
vars_store_arg="--vars-store ${vars_store}"

validate_cpi() {
    cpi=$(cat ${state}/cpi)
    local cpis_dir=${repo_root}/ops/cpis
    if [ ! -d ${cpis_dir}/${cpi} ]; then
        echo "'--cpi ${cpi}' not supported, please one of the following:"
        echo $(ls ${cpis_dir} | cut -d "." -f 1 | xargs)
        exit 1
    fi
}

int_args() (
    local ops_file_args=""
    append_ops_args_for_dir() {
        ops_file_args="${ops_file_args} $(find ${repo_root}/$1/*.yml | sort | sed 's/^/-o /' | xargs)"
    }

    if [ $(cat ${state}/lite) = true ]; then
        append_ops_args_for_dir "ops/lite"
    fi

    append_ops_args_for_dir "ops"

    append_ops_args_for_dir "ops/cpis/$(cat ${state}/cpi)"

    echo "${manifest} ${ops_file_args} ${vars_store_arg} ${vars_file_arg}"
)

ca_cert() {
    local ca_cert_file="${state}/ca.pem"
    store_int --path /default_ca/ca > $ca_cert_file
    store_int --path /default_ca/certificate >> $ca_cert_file
    echo $ca_cert_file
}

usage() {
    echo "BUCC (BOSH UAA Credhud Concourse) CLI v${version}"
    echo "  up -- creates the bucc VM with bosh create-env"
    echo "  down -- deletes VM with bosh delete-env"
    echo "  ssh -- ssh into the bucc VM"
    echo "  env -- sourceable envrionment variables for cli clients"
    echo "  int -- wrapper for '${boshexec} int' for the bosh manifest"
    echo "  info -- displays info about bucc deployed endpoints"
    echo "  credhub -- configures credhub cli"
    echo "  uaac -- configures uaac cli"
    echo "  fly -- configures fly cli"
    exit 1
}

platform() {
    if [ "$(uname)" == "Darwin" ]; then
        echo "darwin"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        echo "linux"
    fi
}

faketty() {
    case $(platform) in
	darwin)
            script -q /dev/null "$@"
	    ;;
	linux)
            script -qfc "$(printf "%q " "$@")" /dev/null
	    ;;
    esac
}

up() {
   ${boshexec} create-env $(int_args) $state_arg
}

down() {
   ${boshexec} delete-env $(int_args) $state_arg
}

env() {
    echo "export BOSH_ENVIRONMENT=$(ip)"
    echo "export BOSH_CA_CERT='$(cat $(ca_cert))'"
    echo "export BOSH_CLIENT=admin"
    echo "export BOSH_CLIENT_SECRET=$(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/name=admin/password)"
}

info() {
    echo "Concourse:"
    echo "  url: $(int --path /instance_groups/0/jobs/name=atc/properties/external_url)"
    echo "  username: $(int --path /instance_groups/0/jobs/name=atc/properties/basic_auth_username)"
    echo "  password: $(int --path /instance_groups/0/jobs/name=atc/properties/basic_auth_password)"
}

_fly() {
    local url=$(int --path /instance_groups/0/jobs/name=atc/properties/external_url)

    if [[ ! -x "$(command -v fly)" ]]; then
	echo "fly not found installing.."
	pushd $(mktemp -d)
	   wget --no-check-certificate -q "${url}/api/v1/cli?arch=amd64&platform=$(platform)" -O fly
           chmod +x fly
           mv fly ${repo_root}/bin/
	popd
    fi

    faketty fly --target bucc login \
        --concourse-url ${url} \
        --username $(int --path /instance_groups/0/jobs/name=atc/properties/basic_auth_username) \
        --password $(int --path /instance_groups/0/jobs/name=atc/properties/basic_auth_password) \
        --team-name main \
        --ca-cert $(ca_cert)
}

credhub() {
    # does not yet support supplying a CA cert
    faketty credhub login --server $(int --path /instance_groups/0/properties/director/config_server/url | rev | cut -c6- | rev) \
            --username credhub-cli \
            --password $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/name=credhub-cli/password) \
            --skip-tls-validation
}

uaac() {
    faketty uaac target $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/url) --ca-cert $(ca_cert)
    faketty uaac token client get uaa_admin --secret $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/uaa_admin/secret)
}

store_int() {
    ${boshexec} int $vars_store $@
}

int() {
    ${boshexec} int $(int_args) $@
}

ip() {
    int --path /networks/name=default/subnets/0/static/0
}

_ssh() {
    local user=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)
    store_int --path /jumpbox_ssh/private_key > $ssh_private_key
    chmod 600 $ssh_private_key
    ssh -i $ssh_private_key $user@$(ip) -t 'command; sudo su -'
}


case "$1" in
    up)
        # defaults
        echo "virtualbox" > ${state}/cpi
        echo "false" > ${state}/lite

        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                --cpi)
                    echo "$2" > ${state}/cpi
                    ;;
                --lite)
                    echo "true" > ${state}/lite
                    ;;
            esac
            shift
        done
        validate_cpi
        up "$@"
        ;;

    down)
        down "$@"
        ;;

    env)
        env "$@"
        ;;

    info)
        info "$@"
        ;;

    credhub)
        credhub "$@"
        ;;

    uaac)
        uaac "$@"
        ;;

    fly)
        _fly "$@"
        ;;

    ssh)
        _ssh "$@"
        ;;

    int)
        shift
        int "$@"
        ;;

    *)
        usage
        exit 1
        ;;
esac
