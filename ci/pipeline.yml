meta:
  name:     (( param "Please name your pipeline" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  pipeline: bucc

  vcenter:
    username: (( param "Please specify the username used for vCenter" ))
    password: (( param "Please specify the password used for vCenter" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       develop
    master-branch: master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here" ))

  aws:
    access_key_id: (( param "Please provide your aws access key to access the compiled releases s3 bucket"  ))
    secret_access_key: (( param "Please provide your aws secret access key to access the compiled releases s3 bucket"  ))

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    notification: '(( concat ":sadpanda: " meta.pipeline " build failed!<br>URL-GOES-HERE" ))'
    channel:       (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:      concourse
    icon:          http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
    fail_moji:     ":airplane_arriving:"
    success_moji:  ":airplane_departure:"
    upset_moji:    ":sad_panda:"
    fail_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Failure! " meta.slack.upset_moji ">" ))'

  url: (( param "What is the URL for the Concourse instance this pipeline is located on?" ))

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - sanity-check
      - test
      - rc
      - shipit
      - major
      - minor
      - bump-patch
  - name: compiled-releases
    jobs:
      - compile-releases
      - concourse-compiled-release-ops-file
      - os-conf-compiled-release-ops-file
      - credhub-compiled-release-ops-file
      - credhub-importer-compiled-release-ops-file
  - name: upstream
    jobs:
      - bosh-deployment-repo
      - concourse-release
      - update-credhub-cli
jobs:
  - name: sanity-check
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - { get: bucc, trigger: true }
          - { get: bucc-ci }
        - task: bucc-manifests
          file: bucc-ci/ci/tasks/bucc-manifests/task.yml
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": sanity-check job failed" ))'

  - name: test
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - { get: bucc, trigger: true, passed: [sanity-check] }
          - { get: bucc-ci }
        - task: cleanup-vsphere
          file: bucc-ci/ci/tasks/cleanup-vshpere-ci-vm/task.yml
          params:
            GOVC_URL: (( concat meta.vcenter.username ":" meta.vcenter.password "@10.58.111.2"  ))
            GOVC_INSECURE: true
            CLEANUP_VM_WITH_IP: 10.213.8.1
        - task: bucc-up-vsphere
          file: bucc-ci/ci/tasks/bucc-up/task.yml
          params:
            ARGS: --cpi vsphere --lite
            VARS:
              director_name: snw-bosh
              internal_cidr: 10.213.0.0/20
              internal_gw: 10.213.0.1
              internal_ip: 10.213.8.1
              network_name: net-10-213-0-0
              vcenter_ip: 10.58.111.2
              vcenter_password: (( grab meta.vcenter.password ))
              vcenter_user: (( grab meta.vcenter.username ))
              vcenter_dc: Interxion MAD2
              vcenter_ds: vol309|vol310
              vcenter_disks: bucc-ci
              vcenter_templates: bucc-ci/templates
              vcenter_vms: bucc-ci/vms
              vcenter_cluster: cluster1
        - task: bucc-test-vsphere
          file: bucc-ci/ci/tasks/bucc-test/task.yml
          ensure:
            task: bucc-down-vsphere
            file: bucc-ci/ci/tasks/bucc-down/task.yml
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": test job failed" ))'


  - name: rc
    public: true
    plan:
      - do:
        - aggregate:
            - { get: bucc,    trigger: true,  passed: [test] }
            - { get: version, trigger: true, params: {pre: rc} }
        - put: version
          params: {file: version/number}
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": rc job failed" ))'

  - name: bump-patch
    public: true
    plan:
      - do:
        - { get: version, trigger: true, params: { bump: patch, pre: rc }, passed: [shipit] } # bump rc + patch, so that subesquent version bumps can trigger a new bump-patch
        - { put: version,                params: { file: version/number} }
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": bump-patch job failed" ))'

  - name: minor
    public: true
    plan:
      - do:
        - { get: version, trigger: false, params: {bump: minor} }
        - { put: version,                 params: {file: version/number} }
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": minor job failed" ))'

  - name: major
    public: true
    plan:
      - do:
        - { get: version, trigger: false, params: {bump: major} }
        - { put: version,                 params: {file: version/number} }
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": major job failed" ))'

  - name: shipit
    public: true
    serial: true
    plan:
      - do:
        - name: inputs
          aggregate:
            - { get: version, passed: [rc], params: {bump: final} }
            - { get: bucc,    passed: [test] }
            - { get: bucc-ci }
            - { get: bucc-stable }
        - task: generate-release-notes
          file: bucc-ci/ci/tasks/generate-release-notes/task.yml
        - task: release
          file: bucc-ci/ci/tasks/shipit/task.yml
        - put: version
          params: { bump: final }
        - put: bucc-master
          params:
            rebase: true
            repository: bucc-out
            tag: release/tag
        - put: bucc
          params:
            rebase: true
            repository: bucc-out
        - name: github
          put: github
          params:
            name:       release/name
            tag:        release/tag
            body:       release-notes/notes.md
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": shipit job failed" ))'

  - name: compile-releases
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - { get: bucc, trigger: true, passed: [sanity-check] }
          - { get: bucc-ci }
        - task: compile-releases
          file: bucc-ci/ci/tasks/compile-releases/task.yml
          privileged: true
        - aggregate:
          - try:
              put: compiled-releases-concourse
              params: { file: "compiled-releases/concourse*.tgz", acl: public-read }
          - try:
              put: compiled-releases-os-conf
              params: { file: "compiled-releases/os-conf*.tgz", acl: public-read }
          - try:
              put: compiled-releases-credhub
              params: { file: "compiled-releases/credhub-[0-9]*.tgz", acl: public-read }
          - try:
              put: compiled-releases-credhub-importer
              params: { file: "compiled-releases/credhub-importer*.tgz", acl: public-read }
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": compiled-releases job failed" ))'

  - name: concourse-compiled-release-ops-file
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - get: bucc
          - get: bucc-ci
          - { get: compiled-releases-concourse, trigger: true }
        - task: update-concourse-compiled-release-ops-file
          file: bucc-ci/ci/tasks/update-compiled-release-ops-file/task.yml
          input_mapping:
            compiled-release: compiled-releases-concourse
          params:
            OPS_FILE_PATH: ops/9-concourse-compiled-release.yml
        - put: bucc
          params:
            merge: true
            repository: bucc-out
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": concourse-compiled-release-ops-file job failed" ))'

  - name: os-conf-compiled-release-ops-file
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - get: bucc
          - get: bucc-ci
          - { get: compiled-releases-os-conf, trigger: true }
        - task: update-os-conf-compiled-release-ops-file
          file: bucc-ci/ci/tasks/update-compiled-release-ops-file/task.yml
          input_mapping:
            compiled-release: compiled-releases-os-conf
          params:
            OPS_FILE_PATH: ops/9-os-conf-compiled-release.yml
        - put: bucc
          params:
            merge: true
            repository: bucc-out
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": os-conf-compiled-release-ops-file job failed" ))'

  - name: credhub-compiled-release-ops-file
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - get: bucc
          - get: bucc-ci
          - { get: compiled-releases-credhub, trigger: true }
        - task: update-credhub-compiled-release-ops-file
          file: bucc-ci/ci/tasks/update-compiled-release-ops-file/task.yml
          input_mapping:
            compiled-release: compiled-releases-credhub
          params:
            OPS_FILE_PATH: ops/9-credhub-compiled-release.yml
        - put: bucc
          params:
            merge: true
            repository: bucc-out
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": credhub-compiled-release-ops-file job failed" ))'

  - name: credhub-importer-compiled-release-ops-file
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - get: bucc
          - get: bucc-ci
          - { get: compiled-releases-credhub-importer, trigger: true }
        - task: update-credhub-importer-compiled-release-ops-file
          file: bucc-ci/ci/tasks/update-compiled-release-ops-file/task.yml
          input_mapping:
            compiled-release: compiled-releases-credhub-importer
          params:
            OPS_FILE_PATH: ops/9-credhub-importer-compiled-release.yml
        - put: bucc
          params:
            merge: true
            repository: bucc-out
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": credhub-importer-compiled-release-ops-file job failed" ))'

  - name: bosh-deployment-repo
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - { get: bucc, trigger: false, passed: [sanity-check] }
          - { get: bosh-deployment, trigger: true }
          - { get: bucc-ci, trigger: false}
        - task: bosh-deployment
          file: bucc-ci/ci/tasks/get-latest-bosh-deployment/task.yml
          privileged: true
        - task: bucc-manifests
          file: bucc-ci/ci/tasks/bucc-manifests/task.yml
        - put: bucc
          params:
            merge: true
            repository: bucc-out
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": bosh-deployment-repo job failed" ))'

  - name: concourse-release
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - { get: bucc, trigger: false, passed: [sanity-check] }
          - { get: bucc-ci, trigger: false }
          - get: bosh-release-concourse
            trigger: true
            params:
              tarball: false
        - task: update-concourse-release
          file: bucc-ci/ci/tasks/update-concourse-release/task.yml
          privileged: true
        - task: bucc-manifests
          file: bucc-ci/ci/tasks/bucc-manifests/task.yml
        - put: bucc
          params:
            merge: true
            repository: bucc-out
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": concourse-release job failed" ))'

  - name: update-credhub-cli
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - { get: bucc, trigger: false, passed: [sanity-check] }
          - { get: bucc-ci, trigger: false }
          - get: credhub-cli
            trigger: true
            params:
              globs:
                - credhub-linux-*.tgz
        - task: update-credhub-cli
          file: bucc-ci/ci/tasks/update-credhub-cli/task.yml
          privileged: true
        - task: bucc-manifests
          file: bucc-ci/ci/tasks/bucc-manifests/task.yml
        - put: bucc
          params:
            merge: true
            repository: bucc-out
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": update-credhub-cli job failed" ))'

resource_types:
  - name: bosh-deployment
    type: docker-image
    source:
      repository: cloudfoundry/bosh-deployment-resource
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: bucc
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))
      ignore_paths: [ci/*]
      submodules: all

  - name: bucc-master
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.master-branch ))
      private_key: (( grab meta.github.private_key ))
      submodules: all

  - name: bucc-stable
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.master-branch ))
      private_key: (( grab meta.github.private_key ))
      tag_filter: "v*"

  - name: bucc-ci
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))
      paths: [ci/*]
      disable_ci_skip: true

  - name: bosh-deployment
    type: git
    source:
      uri:    https://github.com/cloudfoundry/bosh-deployment.git
      branch: (( grab meta.github.master-branch ))
      ignore_paths: [ci/*]

  - name: version
    type: semver
    source :
      driver: git
      uri: (( grab meta.github.uri ))
      private_key: (( grab meta.github.private_key ))
      branch: version
      file: version
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: compiled-releases-concourse
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "concourse.*-(\\d+).tgz"

  - name: compiled-releases-os-conf
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "os-conf.*-(\\d+).tgz"

  - name: compiled-releases-credhub
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "credhub-\\d+.*-(\\d+).tgz"

  - name: compiled-releases-credhub-importer
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "credhub-importer.*-(\\d+).tgz"

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))

  - name: bosh-release-concourse
    type: bosh-io-release
    source:
      repository: concourse/concourse

  - name: credhub-cli
    type: github-release
    source:
      user: cloudfoundry-incubator
      repository: credhub-cli
      access_token: (( grab meta.github.access_token ))
